<?xml version="1.0" encoding="UTF-8"?>
<!-- XML을 정의하는 방식에 DTD와 스키마 방식이 존재한다. 아래는 스키마 방식. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- srping에서 제공하는 DataSource를 정의한다 -->
	<bean id="myDataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost/spring"></property>
		<property name="username" value="root"></property>
		<property name="password" value="!root123$"></property>
	</bean>

	<!-- 트랜잭션을 위한 다이나믹 프록시가 적용된 UserService를 생성하는 팩토리 빈 -->
	<!-- JDK factory bean <bean id="userService" class="springbook.user.service.TxProxyFactoryBean"> 
		<property name="target" ref="userServiceImpl"></property> <property name="transactionManager" 
		ref="transactionManager"></property> <property name="pattern" value="upgradeLevels"></property> 
		<property name="serviceInterface" value="springbook.user.service.UserService"></property> 
		</bean> -->

	<!-- spring 기반의 factory bean -->
	<bean id="userService"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImpl"></property>
		<property name="interceptorNames">
			<list>
			<!-- 여러개의 누가기능Advisor을 추가할 수 있다.  -->
				<value>transactionAdvisor</value>
			</list>
		</property>
	</bean>


	<!-- 아래에서 생성한 userDao 를 이용하여 UserService를 제공한다 -->
	<bean id="userServiceImpl"
		class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="myUserDao"></property>
		<property name="userLevelUpgradePolicy"
			ref="normalUserLevelUpgradePolicy"></property>
		<property name="txManager" ref="transactionManager"></property>
	</bean>

	<!-- 아래에서 생성한 userDao 를 이용하여 UserService를 제공한다 -->
	<bean id="testUserService"
		class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="myUserDao"></property>
		<property name="userLevelUpgradePolicy"
			ref="testUserLevelUpgradePolicy"></property>
		<property name="txManager" ref="transactionManager"></property>
	</bean>


	<bean id="transactionAdvisor"
		class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice"></property>
		<property name="pointcut" ref="transactionPointcut"></property>
	</bean>

	<bean id="transactionPointcut"
		class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="upgrade*">
		</property>
	</bean>


	<bean id="transactionAdvice"
		class="springbook.user.service.TransactionAdvice">
		<property name="transactionManager" ref="transactionManager">
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>



	<bean id="testUserLevelUpgradePolicy"
		class="springbook.user.service.TestNormalUserLevelUpgradePolicy">
		<property name="superPolicy"
			ref="normalUserLevelUpgradePolicy"></property>
		<!-- id value for test -->
		<property name="id" value="dartpaper"></property>

	</bean>

	<bean id="normalUserLevelUpgradePolicy"
		class="springbook.user.service.NormalUserLevelUpgradePolicy">
		<property name="userDao" ref="myUserDao"></property>
	</bean>

	<!-- name 어트리뷰트는 DI에 사용할 수정자(setter) 메소드 이름이고, ref 어트리뷰트는 주입할 오브젝트를 정의한 
		빈id 이다. -->
	<!-- 위에서 정의한 Datasource를 member instance로 사용한다. -->
	<bean id="myUserDao" class="springbook.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>

	<!-- name 어트리뷰트는 DI에 사용할 수정자(setter) 메소드 이름이고, ref 어트리뷰트는 주입할 오브젝트를 정의한 
		빈id 이다. -->
	<!-- 위에서 정의한 Datasource를 member instance로 사용한다. -->
	<bean id="myJdbcContext"
		class="springbook.user.connection.JdbcContext">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>

</beans>
